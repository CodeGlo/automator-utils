{"version":3,"sources":["../src/index.ts","../src/reporting/HTable/HTableWriter.ts","../src/reporting/HTable/index.ts"],"sourcesContent":["export * from \"./reporting\";\n","import { HTableConfig, HTableProps, HierarchyNode } from \".\";\n\nexport const writeCategoryGroup = (\n  categoryGroupStyle: HTableProps[\"categoryGroupStyle\"] = {},\n  depth: number,\n  left: string,\n  right: string,\n  columnConfig: HTableProps[\"columnsConfig\"]\n): string => {\n  // Convert style object to CSS string\n  const styleString = Object.entries(categoryGroupStyle)\n    .map(([key, value]) => `${key}: ${value}`)\n    .join(\";\");\n\n  // Calculate padding-left based on depth, with minimum of 0.5rem\n  const paddingLeft = Math.max(depth * 20, 8) + 8; // 8px = 0.5rem\n\n  // Calculate right text position to align with rightmost column\n  const rightColumnWidth =\n    columnConfig.length > 0\n      ? (columnConfig.sort((a, b) => a.colOrder - b.colOrder).slice(-1)[0]\n          ?.colSpan ?? 1) * 100\n      : 100;\n\n  // Combine the original style with the depth-based padding and background color\n  const finalStyle = `${styleString}; padding-left: ${paddingLeft}px; padding-bottom: 0; margin-bottom: 0; position: relative`;\n\n  const headingTag = depth === 0 ? \"h2\" : \"h3\";\n\n  return `\n    <div style=\"${finalStyle}\">\n      <${headingTag} style=\"display: flex; margin: 0; justify-content: space-between; padding-right: ${\n    rightColumnWidth / 2\n  }px\">\n        <span>${left}</span>\n        <span>${right}</span>\n      </${headingTag}>\n    </div>\n  `.trim();\n};\n\nexport const writeRow = (\n  rowStyle: HTableProps[\"rowStyle\"] = {},\n  columnConfig: HTableProps[\"columnsConfig\"],\n  columnData: { [columnName: string]: string },\n  depth: number\n): string => {\n  // Convert style object to CSS string\n  const styleString = Object.entries(rowStyle)\n    .map(([key, value]) => `${key}: ${value}`)\n    .join(\";\");\n\n  // Calculate indent width based on depth\n  const indentWidth = Math.max(depth * 20, 8) + 8;\n\n  // Generate table cells based on column configuration\n  const cells = [\n    `<td style=\"width: ${indentWidth}px\"></td>`,\n    ...columnConfig.map((column) => {\n      const content = columnData[column.name] || \"\";\n      const contentAlignment = column.contentAlignment || \"center\";\n      return `<td style=\"padding: 2px 8px; text-align: ${contentAlignment}\">${content}</td>`;\n    }),\n  ].join(\"\");\n\n  return `<tr style=\"${styleString}\">${cells}</tr>`.trim();\n};\n\ntype HierarchyPath = {\n  categoryName: string;\n  left: string;\n  right: string;\n  depth: number;\n}[];\n\nexport const writeTable = (\n  props: HTableProps,\n  depth: number,\n  categoryName: string,\n  rowData: any[]\n): string => {\n  const indentWidth = Math.max(depth * 20, 8) + 8;\n\n  // Convert style object to CSS string\n  const headerStyleString = Object.entries(props.headerStyle || {})\n    .map(([key, value]) => `${key}: ${value}`)\n    .join(\";\");\n\n  // Find and render all rows for this category\n  const categoryRows = rowData.filter((row) => row.categoryId === categoryName);\n  const rows = categoryRows\n    .map((row) =>\n      writeRow(props.rowStyle, props.columnsConfig, row.columnData, depth)\n    )\n    .join(\"\\n\");\n\n  return `\n    <div>\n      <table style=\"width: 100%; border-collapse: collapse; margin-bottom: 20px;\">\n        <thead>\n          <tr style=\"${headerStyleString}\">\n            <th style=\"width: ${indentWidth}px; padding: 12px 8px;\"></th>\n            ${props.columnsConfig\n              .sort((a, b) => a.colOrder - b.colOrder)\n              .map((col) => {\n                const width = col.colSpan\n                  ? `width: ${col.colSpan * 100}px;`\n                  : \"\";\n                const alignment = col.alignment || \"center\";\n                return `<th style=\"padding: 12px 8px; text-align: ${alignment}; ${width}\">${col.name}</th>`;\n              })\n              .join(\"\")}\n          </tr>\n        </thead>\n        <tbody>\n          ${rows}\n        </tbody>\n      </table>\n    </div>\n  `;\n};\n\nexport const writeHTable = (config: HTableConfig): string => {\n  const { props, data } = config;\n  const { hierarchy, data: rowData } = data;\n\n  const processCategory = (\n    categoryName: string,\n    category: HierarchyNode,\n    depth: number,\n    output: string[] = [],\n    hierarchyPath: HierarchyPath = []\n  ): string[] => {\n    // Add current category to the hierarchy path\n    const currentPath = [\n      ...hierarchyPath,\n      {\n        categoryName,\n        left: category.left,\n        right: category.right,\n        depth,\n      },\n    ];\n\n    // Check if this category has any associated row data\n    const hasRowData = rowData.some((row) => row.categoryId === categoryName);\n\n    if (hasRowData) {\n      // Write all hierarchy levels first\n      for (const pathItem of currentPath) {\n        output.push(\n          writeCategoryGroup(\n            props.categoryGroupStyle,\n            pathItem.depth,\n            pathItem.left,\n            pathItem.right,\n            props.columnsConfig\n          )\n        );\n      }\n      // Then render the table\n      output.push(writeTable(props, depth, categoryName, rowData));\n    }\n\n    // Process children regardless of whether current node had data\n    if (category.children) {\n      // Sort children alphabetically\n      const sortedChildren = Object.entries(category.children).sort(\n        ([a], [b]) => a.localeCompare(b)\n      );\n\n      // Process each child with the current path\n      for (const [childId, childNode] of sortedChildren) {\n        processCategory(childId, childNode, depth + 1, output, currentPath);\n      }\n    }\n\n    return output;\n  };\n\n  // Start processing from root categories\n  const sortedRootCategories = Object.entries(hierarchy).sort(([a], [b]) =>\n    a.localeCompare(b)\n  );\n\n  const reportParts: string[] = [];\n  for (const [categoryName, category] of sortedRootCategories) {\n    processCategory(categoryName, category, 0, reportParts);\n  }\n\n  // Wrap everything in a container div\n  return `\n      <div style=\"font-family: Arial, sans-serif; color: #333; background-color: white; max-width: 1200px; margin: 0 auto; padding: 20px;\">\n        ${reportParts.join(\"\\n\")}\n      </div>\n    `;\n};\n","import { writeHTable } from \"./HTableWriter\";\n\nexport type HTableProps = {\n  categoryGroupStyle?: {\n    [key: string]: string | number;\n  };\n  headerStyle?: {\n    [key: string]: string | number;\n  };\n  rowStyle?: {\n    [key: string]: string | number;\n  };\n  columnsConfig: {\n    name: string;\n    colSpan?: number;\n    colOrder: number;\n    alignment?: \"left\" | \"center\" | \"right\";\n    contentAlignment?: \"left\" | \"center\" | \"right\";\n  }[];\n};\n\nexport type HierarchyNode = {\n  id: string;\n  left: string;\n  right: string;\n  children?: {\n    [categoryId: string]: HierarchyNode;\n  };\n};\n\nexport type RowData = {\n  rowId: string;\n  categoryId: string;\n  columnData: {\n    [columnName: string]: string;\n  };\n};\n\nexport type HTableData = {\n  hierarchy: {\n    [categoryName: string]: HierarchyNode;\n  };\n  data: RowData[];\n};\n\nexport type HTableConfig = {\n  props: HTableProps;\n  data: HTableData;\n};\n\nexport class HierarchyNodeBuilder {\n  private _id: string;\n  private _left: string;\n  private _right: string;\n  private _children: Map<string, HierarchyNodeBuilder> = new Map();\n\n  constructor(id: string, left: string, right: string = \"\") {\n    this._id = id;\n    this._left = left;\n    this._right = right;\n  }\n\n  getId(): string {\n    return this._id;\n  }\n\n  setLeft(left: string): HierarchyNodeBuilder {\n    this._left = left;\n    return this;\n  }\n\n  getLeft(): string {\n    return this._left;\n  }\n\n  setRight(right: string): HierarchyNodeBuilder {\n    this._right = right;\n    return this;\n  }\n\n  getRight(): string {\n    return this._right;\n  }\n\n  getChildren(): Map<string, HierarchyNodeBuilder> {\n    return this._children;\n  }\n\n  addChild(child: HierarchyNodeBuilder): HierarchyNodeBuilder {\n    this._children.set(child._id, child);\n    return this;\n  }\n\n  createChild(\n    id: string,\n    left: string,\n    right: string = \"\"\n  ): HierarchyNodeBuilder {\n    const child = new HierarchyNodeBuilder(id, left, right);\n    this._children.set(id, child);\n    return child;\n  }\n\n  hasId(id: string): boolean {\n    console.log(this._id, id);\n    if (this._id === id) {\n      return true;\n    }\n\n    for (const child of this._children.values()) {\n      if (child.hasId(id)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  build(): HierarchyNode {\n    const children: { [key: string]: HierarchyNode } = {};\n\n    // First build all children\n    for (const [id, builder] of this._children) {\n      children[id] = builder.build();\n    }\n\n    // Then build self\n    return {\n      id: this._id,\n      left: this._left,\n      right: this._right,\n      ...(this._children.size > 0 && { children }),\n    };\n  }\n}\n\nexport class CategoryGroupStyleBuilder {\n  private _styles: Map<string, string> = new Map();\n\n  setStyle(key: string, value: string): CategoryGroupStyleBuilder {\n    this._styles.set(key, value);\n    return this;\n  }\n\n  getStyle(key: string): string | undefined {\n    return this._styles.get(key);\n  }\n\n  addStyle(key: string, value: string): CategoryGroupStyleBuilder {\n    this._styles.set(key, value);\n    return this;\n  }\n\n  getStyles(): { [key: string]: string } {\n    const styles: { [key: string]: string } = {};\n    this._styles.forEach((value, key) => {\n      styles[key] = value;\n    });\n    return styles;\n  }\n  build(): { [key: string]: string } {\n    return Object.fromEntries(this._styles);\n  }\n}\n\nexport class HeaderStyleBuilder {\n  private _styles: Map<string, string> = new Map();\n\n  setStyle(key: string, value: string): HeaderStyleBuilder {\n    this._styles.set(key, value);\n    return this;\n  }\n\n  getStyle(key: string): string | undefined {\n    return this._styles.get(key);\n  }\n\n  addStyle(key: string, value: string): HeaderStyleBuilder {\n    this._styles.set(key, value);\n    return this;\n  }\n\n  getStyles(): { [key: string]: string } {\n    const styles: { [key: string]: string } = {};\n    this._styles.forEach((value, key) => {\n      styles[key] = value;\n    });\n    return styles;\n  }\n\n  build(): { [key: string]: string } {\n    return Object.fromEntries(this._styles);\n  }\n}\n\nexport class RowStyleBuilder {\n  private _styles: Map<string, string> = new Map();\n\n  setStyle(key: string, value: string): RowStyleBuilder {\n    this._styles.set(key, value);\n    return this;\n  }\n\n  getStyle(key: string): string | undefined {\n    return this._styles.get(key);\n  }\n\n  addStyle(key: string, value: string): RowStyleBuilder {\n    this._styles.set(key, value);\n    return this;\n  }\n\n  getStyles(): { [key: string]: string } {\n    const styles: { [key: string]: string } = {};\n    this._styles.forEach((value, key) => {\n      styles[key] = value;\n    });\n    return styles;\n  }\n\n  build(): { [key: string]: string } {\n    return Object.fromEntries(this._styles);\n  }\n}\n\nexport class ColumnBuilder {\n  private _name: string;\n  private _colSpan?: number;\n  private _colOrder: number;\n  private _alignment: \"left\" | \"center\" | \"right\" = \"center\";\n  private _contentAlignment: \"left\" | \"center\" | \"right\" = \"center\";\n\n  constructor(name: string, colOrder: number) {\n    this._name = name;\n    this._colOrder = colOrder;\n  }\n\n  setName(name: string): ColumnBuilder {\n    this._name = name;\n    return this;\n  }\n\n  getName(): string {\n    return this._name;\n  }\n\n  setColSpan(span: number): ColumnBuilder {\n    this._colSpan = span;\n    return this;\n  }\n\n  getColSpan(): number | undefined {\n    return this._colSpan;\n  }\n\n  setColOrder(order: number): ColumnBuilder {\n    this._colOrder = order;\n    return this;\n  }\n\n  getColOrder(): number {\n    return this._colOrder;\n  }\n\n  setAlignment(alignment: \"left\" | \"center\" | \"right\"): ColumnBuilder {\n    this._alignment = alignment;\n    return this;\n  }\n\n  getAlignment(): \"left\" | \"center\" | \"right\" {\n    return this._alignment;\n  }\n\n  setContentAlignment(alignment: \"left\" | \"center\" | \"right\"): ColumnBuilder {\n    this._contentAlignment = alignment;\n    return this;\n  }\n\n  getContentAlignment(): \"left\" | \"center\" | \"right\" {\n    return this._contentAlignment;\n  }\n\n  build(): {\n    name: string;\n    colSpan?: number;\n    colOrder: number;\n    alignment?: \"left\" | \"center\" | \"right\";\n    contentAlignment?: \"left\" | \"center\" | \"right\";\n  } {\n    return {\n      name: this._name,\n      colSpan: this._colSpan,\n      colOrder: this._colOrder,\n      alignment: this._alignment,\n      contentAlignment: this._contentAlignment,\n    };\n  }\n}\n\nexport class ColumnsConfigBuilder {\n  private _columns: ColumnBuilder[] = [];\n\n  addColumn(column: ColumnBuilder): ColumnsConfigBuilder {\n    this._columns.push(column);\n    return this;\n  }\n\n  removeColumn(columnName: string): ColumnsConfigBuilder {\n    this._columns = this._columns.filter((col) => col.getName() !== columnName);\n    return this;\n  }\n\n  getColumn(columnName: string): ColumnBuilder | undefined {\n    return this._columns.find((col) => col.getName() === columnName);\n  }\n\n  sortByOrder(): ColumnsConfigBuilder {\n    this._columns.sort((a, b) => a.getColOrder() - b.getColOrder());\n    return this;\n  }\n\n  getColumns(): ColumnBuilder[] {\n    return [...this._columns];\n  }\n\n  build(): {\n    name: string;\n    colSpan?: number;\n    colOrder: number;\n    alignment?: \"left\" | \"center\" | \"right\";\n    contentAlignment?: \"left\" | \"center\" | \"right\";\n  }[] {\n    return this._columns.map((column) => column.build());\n  }\n}\n\nexport class HTableConfigBuilder {\n  private _categoryGroupStyle = new CategoryGroupStyleBuilder();\n  private _headerStyle = new HeaderStyleBuilder();\n  private _rowStyle = new RowStyleBuilder();\n  private _columnsConfig = new ColumnsConfigBuilder();\n  private _hierarchy: Map<string, HierarchyNodeBuilder> = new Map();\n  private _data: RowData[] = [];\n  private _rowIdCounter = 0;\n\n  getCategoryGroupStyle(): CategoryGroupStyleBuilder {\n    return this._categoryGroupStyle;\n  }\n\n  getHeaderStyle(): HeaderStyleBuilder {\n    return this._headerStyle;\n  }\n\n  getRowStyle(): RowStyleBuilder {\n    return this._rowStyle;\n  }\n\n  getColumnsConfig(): ColumnsConfigBuilder {\n    return this._columnsConfig;\n  }\n\n  createHierarchyNode(\n    id: string,\n    left: string,\n    right: string = \"\"\n  ): HierarchyNodeBuilder {\n    const node = new HierarchyNodeBuilder(id, left, right);\n    this._hierarchy.set(id, node);\n    return node;\n  }\n\n  addHierarchyNode(node: HierarchyNodeBuilder): HTableConfigBuilder {\n    this._hierarchy.set(node.getId(), node);\n    return this;\n  }\n\n  addRows(\n    category: HierarchyNodeBuilder,\n    rows: RowData[\"columnData\"][]\n  ): HTableConfigBuilder {\n    const categoryId = category.getId();\n\n    if (!this._hierarchy.has(categoryId)) {\n      let inHierarchy = false;\n      this._hierarchy.forEach((builder) => {\n        if (builder.hasId(categoryId)) {\n          inHierarchy = true;\n        }\n      });\n\n      if (!inHierarchy) {\n        console.error(`Category ${categoryId} does not exist in hierarchy`);\n        throw new Error(`Category ${categoryId} does not exist in hierarchy`);\n      }\n    }\n\n    rows.forEach((columnData, index) => {\n      this._data.push({\n        rowId: `${categoryId}_${this._rowIdCounter++}`,\n        categoryId,\n        columnData,\n      });\n    });\n\n    return this;\n  }\n\n  build(): HTableConfig {\n    const hierarchy: { [categoryName: string]: HierarchyNode } = {};\n\n    for (const [id, builder] of this._hierarchy) {\n      hierarchy[id] = builder.build();\n    }\n\n    return {\n      props: {\n        categoryGroupStyle: this._categoryGroupStyle.build(),\n        headerStyle: this._headerStyle.build(),\n        rowStyle: this._rowStyle.build(),\n        columnsConfig: this._columnsConfig.build(),\n      },\n      data: {\n        hierarchy,\n        data: this._data,\n      },\n    };\n  }\n\n  toHTML(): string {\n    const config = this.build();\n    return writeHTable(config);\n  }\n}\n\nexport class OdinHTableConfigBuilder extends HTableConfigBuilder {\n  constructor() {\n    super();\n\n    // Set header style defaults\n    this.getHeaderStyle()\n      .addStyle(\"padding\", \"8px 0\")\n      .addStyle(\"background-color\", \"rgb(52, 40, 78)\")\n      .addStyle(\"color\", \"white\");\n\n    // Set category group style defaults\n    this.getCategoryGroupStyle()\n      .addStyle(\"padding\", \"8px 0\")\n      .addStyle(\"margin-bottom\", \"4px\")\n      .addStyle(\"background-color\", \"rgb(52, 40, 78)\")\n      .addStyle(\"color\", \"white\");\n\n    // Set row style defaults\n    this.getRowStyle()\n      .addStyle(\"padding\", \"4px 0\")\n      .addStyle(\"fontSize\", \"13px\")\n      .addStyle(\"borderBottom\", \"none\")\n      .addStyle(\"lineHeight\", \"1.3\");\n  }\n}\n\n// Example usage:\n// const example = () => {\n//   const builder = new OdinHTableConfigBuilder();\n\n//   // Configure columns\n//   builder.getColumnsConfig()\n//     .addColumn(new ColumnBuilder(\"Name\", 1).setAlignment(\"left\").setContentAlignment(\"left\"))\n//     .addColumn(new ColumnBuilder(\"Price\", 2).setAlignment(\"center\"))\n//     .addColumn(new ColumnBuilder(\"Status\", 3))\n//     .addColumn(new ColumnBuilder(\"Description\", 4).setContentAlignment(\"left\"))\n//     .addColumn(new ColumnBuilder(\"Quantity\", 5));\n\n//   // Create hierarchy\n//   const books = builder.createHierarchyNode(\"books\", \"Books\", \"560\");\n//   const fiction = books.createChild(\"fiction\", \"Fiction\", \"350\");\n//   const nonfiction = books.createChild(\"nonfiction\", \"NonFiction\", \"210\");\n\n//   // Add rows to Fiction category\n//   builder.addRows(fiction, [\n//     {\n//       Name: \"The Silent Echo\",\n//       Price: \"$14.99\",\n//       Status: \"In Stock\",\n//       Description: \"Gripping mystery novel that launches an exciting new series.\",\n//       Quantity: \"200\"\n//     },\n//     {\n//       Name: \"Summer Hearts\",\n//       Price: \"$12.99\",\n//       Status: \"In Stock\",\n//       Description: \"Contemporary romance paperback with exclusive bonus content.\",\n//       Quantity: \"150\"\n//     }\n//   ]);\n\n//   // Add rows to NonFiction category\n//   builder.addRows(nonfiction, [\n//     {\n//       Name: \"Smart Money Moves\",\n//       Price: \"$24.99\",\n//       Status: \"In Stock\",\n//       Description: \"Definitive guide to personal finance and investment strategies.\",\n//       Quantity: \"120\"\n//     }\n//   ]);\n\n//   builder.build();\n//   builder.toHTML();\n// };\n"],"mappings":"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","names":[]}